# -*- coding: utf-8 -*-
"""Determinants_of_Earnings_(start).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_xc61-9-XulREG8U-YGm3kBnz3DWNtK

# Introduction

The National Longitudinal Survey of Youth 1997-2011 dataset is one of the most important databases available to social scientists working with US data.

It allows scientists to look at the determinants of earnings as well as educational attainment and has incredible relevance for government policy. It can also shed light on politically sensitive issues like how different educational attainment and salaries are for people of different ethnicity, sex, and other factors. When we have a better understanding how these variables affect education and earnings we can also formulate more suitable government policies.

<center><img src=https://i.imgur.com/cxBpQ3I.png height=400></center>

### Upgrade Plotly
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade plotly

!pip install pandas
!pip install numpy
!pip install seaborn
!pip install matplotlib
!pip install scikit-learn

"""###  Import Statements

"""

import pandas as pd
import numpy as np

import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

"""## Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""# Load the Data


"""

df_data = pd.read_csv('NLSY97_subset.csv')

"""### Understand the Dataset

Have a look at the file entitled `NLSY97_Variable_Names_and_Descriptions.csv`.

---------------------------

    :Key Variables:  
      1. S           Years of schooling (highest grade completed as of 2011)
      2. EXP         Total out-of-school work experience (years) as of the 2011 interview.
      3. EARNINGS    Current hourly earnings in $ reported at the 2011 interview

# Preliminary Data Exploration üîé

**Challenge**

* What is the shape of `df_data`?
* How many rows and columns does it have?
* What are the column names?
* Are there any NaN values or duplicates?
"""



"""## Data Cleaning - Check for Missing Values and Duplicates

Find and remove any duplicate rows.
"""

# Data Cleaning
df_data.isnull().sum()  # Check for missing values
df_data.duplicated().sum()  # Check for duplicates
df_data.fillna('None', inplace=True)#Filling None where Null value
print(df_data)

"""## Descriptive Statistics"""

df_data[['S', 'EXP', 'EARNINGS']].describe()

"""## Visualise the Features"""

# Visualize the Features
plt.figure(figsize=(10, 6))
plt.scatter(df_data['S'], df_data['EARNINGS'])
plt.xlabel('Years of Schooling')
plt.ylabel('Earnings')
plt.title('Years of Schooling vs. Earnings')
plt.show()

"""# Split Training & Test Dataset

We *can't* use all the entries in our dataset to train our model. Keep 20% of the data for later as a testing dataset (out-of-sample data).  
"""

# Split Training & Test Dataset
X = df_data[['S', 'EXP']]
y = df_data['EARNINGS']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Simple Linear Regression

Only use the years of schooling to predict earnings. Use sklearn to run the regression on the training dataset. How high is the r-squared for the regression on the training data?
"""

# Simple Linear Regression
model = LinearRegression()
model.fit(X_train[['S']], y_train)
r_squared = model.score(X_train[['S']], y_train)
print("R-squared for Simple Linear Regression:", r_squared)

"""### Evaluate the Coefficients of the Model

Here we do a sense check on our regression coefficients. The first thing to look for is if the coefficients have the expected sign (positive or negative).

Interpret the regression. How many extra dollars can one expect to earn for an additional year of schooling?
"""

# Evaluate the Coefficients of the Model
coef = model.coef_[0]
intercept = model.intercept_
print("Coefficient:", coef)
print("Intercept:", intercept)



"""### Analyse the Estimated Values & Regression Residuals

How good our regression is also depends on the residuals - the difference between the model's predictions ( ùë¶ÃÇ ùëñ ) and the true values ( ùë¶ùëñ ) inside y_train. Do you see any patterns in the distribution of the residuals?
"""

y_pred_train = model.predict(X_train[['S']])

plt.figure(figsize=(10, 6))
plt.scatter(X_train[['S']], y_train, label='Actual')
plt.scatter(X_train[['S']], y_pred_train, label='Estimated')
plt.xlabel('Years of Schooling')
plt.ylabel('Earnings')
plt.title('Estimated Values vs. Actual Values (Training Data)')
plt.legend()
plt.show()

residuals = y_train - y_pred_train

plt.figure(figsize=(10, 6))
sns.histplot(residuals, kde=True)
plt.xlabel('Residuals')
plt.ylabel('Density')
plt.title('Distribution of Residuals')
plt.show()

"""# Multivariable Regression

Now use both years of schooling and the years work experience to predict earnings. How high is the r-squared for the regression on the training data?
"""

# Multivariable Regression
model.fit(X_train, y_train)
r_squared_multivar = model.score(X_train, y_train)
print("R-squared for Multivariable Regression:", r_squared_multivar)



"""### Evaluate the Coefficients of the Model"""

# Evaluate the Coefficients of the Model
coef_multivar = model.coef_
intercept_multivar = model.intercept_
print("Coefficients:", coef_multivar)
print("Intercept:", intercept_multivar)

"""### Analyse the Estimated Values & Regression Residuals"""

# Same as above

"""# Use Your Model to Make a Prediction

How much can someone with a bachelors degree (12 + 4) years of schooling and 5 years work experience expect to earn in 2011?
"""

# Use Your Model to Make a Prediction
new_data = pd.DataFrame({'S': [16], 'EXP': [8]})  # Example values for someone with 16 years of schooling and 5 years of work experience
predicted_earnings = model.predict(new_data)
print("Predicted Earnings:", predicted_earnings)